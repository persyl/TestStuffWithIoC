@{
    ViewBag.Title = "Bull &amp; Bear Game";
}

<!-- HTML5 IDEA -->
<canvas id="gameCanvas"></canvas>

<script type="text/javascript">
    var CONST_UP = "up";
    var CONST_DOWN = "down";
    var gameLoop;
    var ctx; // context
    var drawPositionX = 0;
    var drawPositionY = 0;
    var allowedKeyStrokesList = [38, 40]; //Up/down arrows
    var canvasWidth = 800;
    var canvasHeight = 480;
    var blackImageForPlayer = new Image(); // A piece of black image when erasing player
    var blackImageForMarker = new Image(); // A piece of black image when erasing marker
    var initialBackground = new Image(); // storage for new background piece
    var oldBack = new Image(); // storage for old background piece
    var player = new Image(); // player
    var playerWidthHeight = 30;
    var playerX = 0; // current player position X
    var playerY = 0; // current player position Y
    var oldPlayerX = 0; // old player position Y
    var oldPlayerY = 0; // old player position Y
    var amountOfTotalMarkers = 10; //Use even value, not an odd value
    var markersArray = [];
    var movingMarkerStepValue = 3; //How much pixels the markers should move to the left each time
    var markerWidthHeight = 20;
    var bullHits = 0;

    //Index curve
    var indexPoints = [];
    var currentIndexPoint = 1;
    var indexSpeed = 2;
    var indexTargetX = 0;
    var indexTargetY = 0;
    var indexX = 0;
    var indexY = 0;

    //jQuery objects
    var $canvas;
    var $gameInfo;

    //Custom objects
    var Marker = function(x, y, type, fillStyle) {
        this.x = x;
        this.y = y;
        this.prevX = -1;
        this.prevY = -1;
        this.fillStyle = fillStyle;
        this.type = type;
    }

    function initGame() {
        $canvas.width = canvasWidth;
        $canvas.height = canvasHeight;

        // Make sure you got it.
        if ($canvas.getContext) {
            // Specify 2d canvas type.
            ctx = $canvas.getContext("2d");

            // Paint it black.
            ctx.fillStyle = "black";
            ctx.rect(0, 0, canvasWidth, canvasHeight);
            ctx.fill();

            // Save the initial background.
            blackImageForPlayer = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);
            blackImageForMarker = ctx.getImageData(0, 0, markerWidthHeight, markerWidthHeight);
            oldBack = blackImageForPlayer;
            initialBackground = blackImageForPlayer;

            //Make one marker of each type
            addOneMarker(CONST_UP);
            addOneMarker(CONST_DOWN);
            initIndexCurve();

            drawMarkers();
            drawPlayer();
            drawIndexCurve();
        }

        gameLoop = setInterval(doGameLoop, 16);

        // Add keyboard listener.
        window.addEventListener('keydown', whatKey, true);

    }

    function initIndexCurve() {
        // Add some indexpoints
        for (var i = 0; i < 50; i++) {
            indexPoints.push({
                x: i * (canvasWidth / 50),
                y: (canvasHeight/2) + Math.sin(i) * 10
            });
        }
        // Set the initial target and starting point
        indexTargetX = indexPoints[1].x;
        indexTargetY = indexPoints[1].y;
        indexX = indexPoints[0].x;
        indexY = indexPoints[0].y;
    }

    function getRandomValue(limit) {
        return Math.floor((Math.random() * limit) + 1);
    }

    function addOneMarker(markerType) {
        if (markerType != CONST_UP) markerType = CONST_DOWN; //Make sure to use the constant values
        var fillStyle = markerType == CONST_UP ? "rgb(51, 190, 0)" : "rgb(255, 0, 0)";
        var decreasePositionValue = 0; //To spread markers a bit in to the left of the game board
        decreasePositionValue = getRandomValue(canvasWidth);
        markersArray.push(new Marker(canvasWidth - decreasePositionValue, getRandomValue(canvasHeight), markerType, fillStyle));
    }

    // Paint a random starfield.
    function drawMarkers() {
        // Draw 25 markers.
        $.each(markersArray, function(index, markerObject) {
            //console.log(markerObject);
            
            //Make previous position of marker black again
            if (markerObject.prevX != -1 && markerObject.prevY != -1) {
                ctx.putImageData(blackImageForMarker, markerObject.prevX, markerObject.prevY);
            }
            
            // Set the markers color
            ctx.fillStyle = markerObject.fillStyle;

            // Draw an individual marker.
            ctx.beginPath();
            var halfMarkerRatio = markerWidthHeight / 2;
            if (markerObject.type == CONST_UP) {
                //Body of the arrow
                ctx.rect(markerObject.x + halfMarkerRatio / 2, markerObject.y + halfMarkerRatio, halfMarkerRatio, halfMarkerRatio);
                //Top of the arrow
                drawPositionX = markerObject.x + halfMarkerRatio;
                drawPositionY = markerObject.y;
                ctx.moveTo(drawPositionX, drawPositionY);
                drawPositionX = drawPositionX - halfMarkerRatio;
                drawPositionY = drawPositionY + halfMarkerRatio;
                ctx.lineTo(drawPositionX, drawPositionY);
                drawPositionX = drawPositionX + markerWidthHeight;
                ctx.lineTo(drawPositionX, drawPositionY);
            } else {
                //Body of the arrow
                ctx.rect(markerObject.x + halfMarkerRatio / 2, markerObject.y, halfMarkerRatio, halfMarkerRatio);
                //Bottom of the arrow
                drawPositionX = markerObject.x;
                drawPositionY = markerObject.y + halfMarkerRatio;
                ctx.moveTo(drawPositionX, drawPositionY);
                drawPositionX = drawPositionX + halfMarkerRatio;
                drawPositionY = drawPositionY + halfMarkerRatio;
                ctx.lineTo(drawPositionX, drawPositionY);
                drawPositionX = drawPositionX + halfMarkerRatio;
                drawPositionY = drawPositionY - halfMarkerRatio;
                ctx.lineTo(drawPositionX, drawPositionY);
            }
            ctx.closePath();
            ctx.fill();
        });
    }

    function moveMarkers() {
        //Move all markers one step to the left on the game board
        $.each(markersArray, function (index, markerObject) {
            markersArray[index].prevX = markerObject.x;
            markersArray[index].prevY = markerObject.y;
            markersArray[index].x = markersArray[index].x - movingMarkerStepValue;
            //If moving out of game board, RE-USE marker and start it from right side again with new y value
            if (markersArray[index].x <= 0) {
                markersArray[index].x = canvasWidth;
                markersArray[index].y = getRandomValue(canvasHeight); //Set a new random y value on it
            }
        });

        if (markersArray.length < amountOfTotalMarkers) {
            //Make one marker of each type
            addOneMarker(CONST_UP);
            addOneMarker(CONST_DOWN);
        }
        
        drawMarkers();
    }

    function drawPlayer() {

        //Draw Bull
        ctx.beginPath();
        ctx.rect(0, 0, 30, 30);
        ctx.closePath();
        ctx.fillStyle = "grey";
        ctx.fill();

        ctx.beginPath();
        ctx.moveTo(0, 15);
        ctx.bezierCurveTo(0, -4, 30, -4, 30, 15);
        ctx.moveTo(0, 15);
        ctx.bezierCurveTo(0, 34, 30, 34, 30, 15);
        //ctx.bezierCurveTo(3.6, 14.1, 9.1, 11.8, 16.0, 11.8);
        //ctx.bezierCurveTo(22.9, 11.8, 28.4, 14.1, 28.4, 16.9);
        ctx.closePath();
        ctx.fillStyle = "rgb(222, 103, 0)";
        ctx.fill();
        
        // Save player data.
        player = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);

        // Erase it for now.
        ctx.putImageData(blackImageForPlayer, 0, 0); //oldBack

    }

    function doGameLoop() {
        moveMarkers();

        // Put old background down to erase player.
        ctx.putImageData(blackImageForPlayer, oldPlayerX, oldPlayerY);

        // Put player in new position.
        ctx.putImageData(player, playerX, playerY);
        var bullMarkerHits = $.grep(markersArray, function (obj, markersArrayIndex) {
            var returnValue = obj.type == CONST_UP && obj.x >= playerX && obj.x <= playerX + playerWidthHeight && obj.y >= playerY && obj.y <= playerY + playerWidthHeight;
            if (returnValue) {
                markersArray.splice(markersArrayIndex, 1); //Remove this marker completely from markersArray as it have been "eaten"
                addOneMarker(obj.type); //Add a new one of same type
                ctx.putImageData(blackImageForMarker, obj.x, obj.y); //Make position black of where the marker was
                flashHit(obj.type);
            }
            return returnValue;
        });
        
        var bullMarkerLoss = $.grep(markersArray, function (obj, markersArrayIndex) {
            var returnValue = obj.type == CONST_DOWN && obj.x >= playerX && obj.x <= playerX + playerWidthHeight && obj.y >= playerY && obj.y <= playerY + playerWidthHeight;
            if (returnValue) {
                markersArray.splice(markersArrayIndex, 1); //Remove this marker completely from markersArray as it have been "eaten"
                addOneMarker(obj.type); //Add a new one of same type
                ctx.putImageData(blackImageForMarker, obj.x, obj.y); //Make position black of where the marker was
                flashHit(obj.type);
            }
            return returnValue;
        });
        bullHits += bullMarkerHits.length - bullMarkerLoss.length;
        $gameInfo.html('<span class="strong-message">Total hits: ' + bullHits + '!</span>');
    }

    function flashHit(markerType) {
        var cssClass = markerType == CONST_UP ? 'bull-flash' : 'bear-flash';
        $('#main-body').addClass(cssClass).delay(200).queue(function (next) {
            $(this).removeClass(cssClass);
            next();
        });
    }

    // Get key press.
    function whatKey(evt) {
        if (allowedKeyStrokesList.indexOf(evt.keyCode)>=0) {
            // Flag to put variables initialBackground if we hit an edge of the board.
            var flag = 0;

            // Get where the player was before key process.
            oldPlayerX = playerX;
            oldPlayerY = playerY;
            oldBack = initialBackground;

            switch (evt.keyCode) {
                //Down arrow
            case 40:
                playerY = playerY + playerWidthHeight;
                if (playerY > canvasHeight - playerWidthHeight) {
                    // If at edge, reset player position and set flag.
                    playerY = canvasHeight - playerWidthHeight;
                    flag = 1;
                }
                break;

            //Up arrow 
            case 38:
                playerY = playerY - playerWidthHeight;
                if (playerY < 0) {
                    // If at edge, reset player position and set flag.
                    playerY = 0;
                    flag = 1;
                }
                break;

            }
        
            // If flag is set, the player did not move.
            // Put everything back the way it was.
            if (flag) {
                playerX = oldPlayerX;
                playerY = oldPlayerY;
                initialBackground = oldBack;
            } else {
                // Otherwise, get background where the player will go
                // So you can redraw background when the player
                // moves again.
                initialBackground = ctx.getImageData(playerX, playerY, playerWidthHeight, playerWidthHeight);
            }
        }
    }

    window.requestAnimFrame = (function () {
        return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
    })();

    function drawIndexCurve() {
        var tx = indexTargetX - indexX,
            ty = indexTargetY - indexY,
            dist = Math.sqrt(tx * tx + ty * ty),
            velX = (tx / dist) * indexSpeed,
            velY = (ty / dist) * indexSpeed;

        indexX += velX;
        indexY += velY;

        if (dist < 1) {
            currentIndexPoint++;

            if (currentIndexPoint >= indexPoints.length) {
                currentIndexPoint = 1;
                indexX = indexPoints[0].x;
                indexY = indexPoints[0].y;
            }

            indexTargetX = indexPoints[currentIndexPoint].x;
            indexTargetY = indexPoints[currentIndexPoint].y;
        }

        //ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        ctx.beginPath();
        ctx.moveTo(indexPoints[0].x, indexPoints[0].y);
        ctx.lineWidth = 0.1;
        ctx.strokeStyle = '#FFEA00';
        //ctx.fillStyle = '#2068A8';

        for (var p = 0; p < currentIndexPoint - 1; p++) {
            ctx.lineTo(indexPoints[p].x, indexPoints[p].y);
        }
        ctx.lineTo(indexX, indexY);
        ctx.stroke();
        //requestAnimFrame(drawIndexCurve);
    }

    $(document).ready(function () {
        $canvas = $("#gameCanvas")[0];
        $gameInfo = $('#gameInfo');
        $('#movingMarkerStepValue').val(movingMarkerStepValue);
        initGame();

        $('#MyColumn2').attr('style', 'top:5px;left:' + (canvasWidth - 220) + 'px;right:auto;');

        //Increase game speed gradually
        setInterval(function() {
            movingMarkerStepValue++;
            $('#movingMarkerStepValue').val(movingMarkerStepValue);
        }, 10000);
    });
</script>


    @section MyColumn2{
        <div>
            <b>Bull & Bear Game</b>
            <div id="gameInfo">Per</div>
            <br />
            <label for="movingMarkerStepValue"><b>Game speed</b></label><br />
            <input id="movingMarkerStepValue" size="1" type="text" onkeyup="movingMarkerStepValue = this.value" />
            <em>Increases automatically</em>
        </div>
    }
