@{
    ViewBag.Title = "Bull &amp; Bear Game";
}

<!-- HTML5 IDEA -->
<canvas id="gameCanvas"></canvas>

<script type="text/javascript">
    var canvas; // canvas
    var ctx; // context
    var allowedKeyStrokesList = [38, 40]; //Up/down arrows
    var canvasWidth = 800;
    var canvasHeight = 480;
    var initialBackground = new Image(); // storage for new background piece
    var oldBack = new Image(); // storage for old background piece
    var player = new Image(); // player
    var playerWidthHeight = 30;
    var playerX = 0; // current player position X
    var playerY = 0; // current player position Y
    var oldPlayerX = 0; // old player position Y
    var oldPlayerY = 0; // old player position Y

    function initGame() {

        // Get the canvas element.
        canvas = $("#gameCanvas")[0];
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;

        // Make sure you got it.
        if (canvas.getContext)
        {
            // Specify 2d canvas type.
            ctx = canvas.getContext("2d");

            // Paint it black.
            ctx.fillStyle = "black";
            ctx.rect(0, 0, canvasWidth, canvasHeight);
            ctx.fill();

            // Save the initial background.
            initialBackground = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);

            // Paint the starfield.
            makeMarkers("rgb(51, 190, 0)");
            makeMarkers("rgb(255, 0, 0)");

            // Draw player.
            makePlayer();
        }

        // Play the game until the until the game is over.
        var gameLoop = setInterval(doGameLoop, 16);

        // Add keyboard listener.
        window.addEventListener('keydown', whatKey, true);

    }

    // Paint a random starfield.
    function makeMarkers(fillStyle) {

        // Draw 25 markers.
        for (var i = 0; i <= 25; i++) {
            // Get random positions for markers.
            var x = Math.floor(Math.random() * canvasWidth);
            var y = Math.floor(Math.random() * canvasHeight);

            // Make the markers green
            ctx.fillStyle = fillStyle;

            // Give the player some room by painting black marker.
            if (x < playerWidthHeight && y < playerWidthHeight) ctx.fillStyle = "black";

            // Draw an individual star.
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();

            // Save black background.
            oldBack = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);
        }
    }

    function makePlayer() {

        // Draw saucer bottom.
        ctx.beginPath();
        ctx.moveTo(28.4, 16.9);
        ctx.bezierCurveTo(28.4, 19.7, 22.9, 22.0, 16.0, 22.0);
        ctx.bezierCurveTo(9.1, 22.0, 3.6, 19.7, 3.6, 16.9);
        ctx.bezierCurveTo(3.6, 14.1, 9.1, 11.8, 16.0, 11.8);
        ctx.bezierCurveTo(22.9, 11.8, 28.4, 14.1, 28.4, 16.9);
        ctx.closePath();
        ctx.fillStyle = "rgb(222, 103, 0)";
        ctx.fill();

        // Draw saucer top.
        ctx.beginPath();
        ctx.moveTo(22.3, 12.0);
        ctx.bezierCurveTo(22.3, 13.3, 19.4, 14.3, 15.9, 14.3);
        ctx.bezierCurveTo(12.4, 14.3, 9.6, 13.3, 9.6, 12.0);
        ctx.bezierCurveTo(9.6, 10.8, 12.4, 9.7, 15.9, 9.7);
        ctx.bezierCurveTo(19.4, 9.7, 22.3, 10.8, 22.3, 12.0);
        ctx.closePath();
        ctx.fillStyle = "rgb(51, 190, 0)";
        ctx.fill();

        // Save player data.
        player = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);

        // Erase it for now.
        ctx.putImageData(oldBack, 0, 0);

    }

    function doGameLoop() {

        // Put old background down to erase player.
        ctx.putImageData(oldBack, oldPlayerX, oldPlayerY);

        // Put player in new position.
        ctx.putImageData(player, playerX, playerY);

    }

    // Get key press.
    function whatKey(evt) {
        if (allowedKeyStrokesList.indexOf(evt.keyCode)>=0) {
            // Flag to put variables initialBackground if we hit an edge of the board.
            var flag = 0;

            // Get where the player was before key process.
            oldPlayerX = playerX;
            oldPlayerY = playerY;
            oldBack = initialBackground;

            switch (evt.keyCode) {
                //Down arrow
                case 40:
                    playerY = playerY + playerWidthHeight;
                    if (playerY > canvasHeight - playerWidthHeight) {
                        // If at edge, reset player position and set flag.
                        playerY = canvasHeight - playerWidthHeight;
                        flag = 1;
                    }
                    break;

                //Up arrow 
                case 38:
                    playerY = playerY - playerWidthHeight;
                    if (playerY < 0) {
                        // If at edge, reset player position and set flag.
                        playerY = 0;
                        flag = 1;
                    }
                    break;

            }
        
            // If flag is set, the player did not move.
            // Put everything back the way it was.
            if (flag) {
                playerX = oldPlayerX;
                playerY = oldPlayerY;
                initialBackground = oldBack;
            } else {
                // Otherwise, get background where the player will go
                // So you can redraw background when the player
                // moves again.
                initialBackground = ctx.getImageData(playerX, playerY, playerWidthHeight, playerWidthHeight);
            }
        }
    }

    $(document).ready(function () {
        initGame();
    });
</script>


    @section MyColumn2{
        <div>
            Bull & Bear Game
        </div>
    }
