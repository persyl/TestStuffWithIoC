@{
    ViewBag.Title = "Bull &amp; Bear Game";
}

<!-- HTML5 IDEA -->
<canvas id="gameCanvas"></canvas>

<script type="text/javascript">
    var CONST_UP = "up";
    var CONST_DOWN = "down";
    var ctx; // context
    var allowedKeyStrokesList = [38, 40]; //Up/down arrows
    var canvasWidth = 800;
    var canvasHeight = 480;
    var blackImage = new Image(); // A piece of black image
    var initialBackground = new Image(); // storage for new background piece
    var oldBack = new Image(); // storage for old background piece
    var player = new Image(); // player
    var playerWidthHeight = 30;
    var playerX = 0; // current player position X
    var playerY = 0; // current player position Y
    var oldPlayerX = 0; // old player position Y
    var oldPlayerY = 0; // old player position Y
    var amountOfTotalMarkers = 100; //Use even value, not an odd value
    var markersArray = [];
    var movingMarkerStepValue = 2; //How much pixels the markers should move to the left each time
    var bullHits = 0;

    //jQuery objects
    var $canvas;
    var $gameInfo;

    //Custom objects
    var Marker = function(x, y, type, fillStyle) {
        this.x = x;
        this.y = y;
        this.prevX = -1;
        this.prevY = -1;
        this.fillStyle = fillStyle;
        this.type = type;
    }

    function initGame() {
        $canvas.width = canvasWidth;
        $canvas.height = canvasHeight;

        // Make sure you got it.
        if ($canvas.getContext) {
            // Specify 2d canvas type.
            ctx = $canvas.getContext("2d");

            // Paint it black.
            ctx.fillStyle = "black";
            ctx.rect(0, 0, canvasWidth, canvasHeight);
            ctx.fill();

            // Save the initial background.
            blackImage = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);
            oldBack = blackImage;
            initialBackground = blackImage;

            addTwoMarkers();

            // Paint the starfield.
            makeMarkers();

            // Draw player.
            makePlayer();
        }

        var gameLoop = setInterval(doGameLoop, 16);

        // Add keyboard listener.
        window.addEventListener('keydown', whatKey, true);

    }

    function getRandomValue(limit) {
        return Math.floor((Math.random() * limit) + 1);
    }

    function addTwoMarkers() {
        //Make one marker of each type
        var decreasePositionValue = 0; //To spread markers a bit in to the left of the game board
        decreasePositionValue = getRandomValue(canvasWidth);
        markersArray.push(new Marker(canvasWidth - decreasePositionValue, getRandomValue(canvasHeight), CONST_UP, "rgb(51, 190, 0)"));

        decreasePositionValue = getRandomValue(canvasWidth);
        markersArray.push(new Marker(canvasWidth - decreasePositionValue, getRandomValue(canvasHeight), CONST_DOWN, "rgb(255, 0, 0)"));
    }

    // Paint a random starfield.
    function makeMarkers() {
        // Draw 25 markers.
        $.each(markersArray, function(index, markerObject) {
            //console.log(markerObject);
            
            //Make previous position of marker black again
            if (markerObject.prevX != -1 && markerObject.prevY != -1) {
                ctx.putImageData(blackImage, markerObject.prevX - (playerWidthHeight/2), markerObject.prevY - (playerWidthHeight/2));
            }
            
            // Make the markers green
            ctx.fillStyle = markerObject.fillStyle;

            // Give the player some room by painting black marker.
            if (markerObject.x < playerWidthHeight && markerObject.y < playerWidthHeight) ctx.fillStyle = "black";

            // Draw an individual star.
            ctx.beginPath();
            ctx.arc(markerObject.x, markerObject.y, 3, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
        });
    }

    function moveMarkers() {
        //console.log(markersArray);
        //Move all markers one step to the left on the game board
        $.each(markersArray, function (index, markerObject) {
            markersArray[index].prevX = markerObject.x;
            markersArray[index].prevY = markerObject.y;
            markersArray[index].x = markersArray[index].x - movingMarkerStepValue;
            //If moving out of game board, RE-USE marker and start it from right side again with new y value
            if (markersArray[index].x <= 0) {
                markersArray[index].x = canvasWidth;
                markersArray[index].y = getRandomValue(canvasHeight); //Set a new random y value on it
            }
        });

        if (markersArray.length < amountOfTotalMarkers) {
            addTwoMarkers();
        }
        
        //TODO: Call makeMarkers() and redraw all markers
        makeMarkers();
    }

    function makePlayer() {

        //Draw Bull
        ctx.beginPath();
        ctx.rect(0, 0, 30, 30);
        ctx.closePath();
        ctx.fillStyle = "grey";
        ctx.fill();

        ctx.beginPath();
        ctx.moveTo(0, 15);
        ctx.bezierCurveTo(0, -4, 30, -4, 30, 15);
        ctx.moveTo(0, 15);
        ctx.bezierCurveTo(0, 34, 30, 34, 30, 15);
        //ctx.bezierCurveTo(3.6, 14.1, 9.1, 11.8, 16.0, 11.8);
        //ctx.bezierCurveTo(22.9, 11.8, 28.4, 14.1, 28.4, 16.9);
        ctx.closePath();
        ctx.fillStyle = "rgb(222, 103, 0)";
        ctx.fill();
        
        // Save player data.
        player = ctx.getImageData(0, 0, playerWidthHeight, playerWidthHeight);

        // Erase it for now.
        ctx.putImageData(blackImage, 0, 0); //oldBack

    }

    function doGameLoop() {
        moveMarkers();

        // Put old background down to erase player.
        ctx.putImageData(blackImage, oldPlayerX, oldPlayerY);

        // Put player in new position.
        ctx.putImageData(player, playerX, playerY);
        var bullMarkerHits = $.grep(markersArray, function(obj) {
            return obj.type == CONST_UP && obj.x >= playerX && obj.x <= playerX + playerWidthHeight && obj.y >= playerY && obj.y <= playerY + playerWidthHeight;
        });
        var bullMarkerLoss = $.grep(markersArray, function (obj) {
            return obj.type == CONST_DOWN && obj.x >= playerX && obj.x <= playerX + playerWidthHeight && obj.y >= playerY && obj.y <= playerY + playerWidthHeight;
        });
        bullHits += bullMarkerHits.length - bullMarkerLoss.length;
        $gameInfo.html('<span class="strong-message">Total hits: ' + bullHits + '!</span>');
    }

    // Get key press.
    function whatKey(evt) {
        if (allowedKeyStrokesList.indexOf(evt.keyCode)>=0) {
            // Flag to put variables initialBackground if we hit an edge of the board.
            var flag = 0;

            // Get where the player was before key process.
            oldPlayerX = playerX;
            oldPlayerY = playerY;
            oldBack = initialBackground;

            switch (evt.keyCode) {
                //Down arrow
            case 40:
                playerY = playerY + playerWidthHeight;
                if (playerY > canvasHeight - playerWidthHeight) {
                    // If at edge, reset player position and set flag.
                    playerY = canvasHeight - playerWidthHeight;
                    flag = 1;
                }
                break;

            //Up arrow 
            case 38:
                playerY = playerY - playerWidthHeight;
                if (playerY < 0) {
                    // If at edge, reset player position and set flag.
                    playerY = 0;
                    flag = 1;
                }
                break;

            }
        
            // If flag is set, the player did not move.
            // Put everything back the way it was.
            if (flag) {
                playerX = oldPlayerX;
                playerY = oldPlayerY;
                initialBackground = oldBack;
            } else {
                // Otherwise, get background where the player will go
                // So you can redraw background when the player
                // moves again.
                initialBackground = ctx.getImageData(playerX, playerY, playerWidthHeight, playerWidthHeight);
            }
        }
    }

    $(document).ready(function () {
        $canvas = $("#gameCanvas")[0];
        $gameInfo = $('#gameInfo');

        initGame();
    });
</script>


    @section MyColumn2{
        <div>
            <b>Bull & Bear Game</b>
            <div id="gameInfo">Per</div>
        </div>
    }
